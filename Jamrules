# Override Jambase rules to allow sources to specify a directory part and a
# LOCATE_TARGET simultaneously.
rule MakeLocate {
	local _d ;
	if $(<:D) { _d = \\$(<:D) ; } else { _d = "" ; }
	local _finaldir = $(>[1]:E=.)$(_d) ;
	if $(>) {
		LOCATE on $(<) = $(>) ;
		Depends $(<) : $(_finaldir:G=dir) ;
		MkDir $(_finaldir:G=dir) ;
	}
}

# Compiling other objects

## Resource Compiler
RC ?= rc ;
RCFLAGS ?= ;

rule Rc {
	Depends $(<) : $(>) ;
	Clean clean : $(<) ;
	SUFOBJ on $(>) = .res ; # currently has no effect; only global SUFOBJ is used. Thankfully, link doesn't care.
}

actions Rc {
	$(RC) /nologo /fo$(<) $(RCFLAGS) /i$(HDRS) $(>)
}

## UserObject using the above

rule UserObject {
	switch $(>:S) {
		case .rc : Rc $(<) : $(>) ;
		case * : Exit "Unknown suffix on" $(>) ;
	}
}

# Test Run

NotFile tests ;
NotFile runtests ;

Depends all : tests ;

rule VsTest {
	local _t ;
	_t = [ FAppendSuffix $(<) : .dll ] ;
	Depends tests : $(_t) ;
	if $(_t) != $(<) {
	    Depends $(<) : $(_t) ;
	    NotFile $(<) ;
	}
	LINKFLAGS on $(_t) = $(LINKFLAGS) /DLL /LIBPATH:\"$(MSVCUNIT)\\lib\" ;
	Main $(_t) : $(>) ;

	# also set up a rule to run the built tests
	NotFile $(_t:G=runtests) ;
	Always $(_t:G=runtests) ;
	Depends runtests : $(_t:G=runtests) ;
	Depends $(_t:G=runtests) : $(_t) ;
	LOCATE on $(_t:G=runtests) = [ GetTargetVar $(_t) : LOCATE ] ;
	RunVsTest1 $(_t:G=runtests) ;
}

actions RunVsTest1 {
	vstest.console.exe $(LOCATE)\$(<:G=) /logger:trx /Platform:x86 /ResultsDirectory:$(LOCATE)\TestResults
}
